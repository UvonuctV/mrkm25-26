/*
 * –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ1 - OpenSSL
 * –ì—ñ–±—Ä—ñ–¥–Ω–∞ –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–∞ RSA + AES
 * –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Windows x64, Visual Studio 2022, C++17
 * –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: OpenSSL —á–µ—Ä–µ–∑ vcpkg
 */

#include <iostream>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <cstring>
#include <windows.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/evp.h>
#include <openssl/aes.h>
#include <openssl/rand.h>
#include <openssl/err.h>

 // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ
void setupConsole() {
    SetConsoleOutputCP(CP_UTF8);
    SetConsoleCP(CP_UTF8);
    std::cout.imbue(std::locale(""));
}

// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ OpenSSL
class OpenSSLHybridCrypto {
private:
    EVP_PKEY* rsa_keypair;
    std::vector<unsigned char> aes_key;
    std::vector<unsigned char> aes_iv;

    void handleErrors() {
        ERR_print_errors_fp(stderr);
        abort();
    }

public:
    OpenSSLHybridCrypto() : rsa_keypair(nullptr) {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenSSL
        OpenSSL_add_all_algorithms();
        ERR_load_crypto_strings();
    }

    ~OpenSSLHybridCrypto() {
        if (rsa_keypair) {
            EVP_PKEY_free(rsa_keypair);
        }
        EVP_cleanup();
        ERR_free_strings();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è RSA –∫–ª—é—á–æ–≤–æ—ó –ø–∞—Ä–∏ (2048 –±—ñ—Ç)
    void generateRSAKeypair() {
        EVP_PKEY_CTX* ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
        if (!ctx) handleErrors();

        if (EVP_PKEY_keygen_init(ctx) <= 0) handleErrors();
        if (EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 2048) <= 0) handleErrors();

        if (EVP_PKEY_keygen(ctx, &rsa_keypair) <= 0) handleErrors();

        EVP_PKEY_CTX_free(ctx);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AES-256 –∫–ª—é—á–∞ —Ç–∞ IV
    void generateAESKey() {
        aes_key.resize(32);  // AES-256: 32 –±–∞–π—Ç–∏
        aes_iv.resize(16);   // AES block size: 16 –±–∞–π—Ç

        if (RAND_bytes(aes_key.data(), 32) != 1) handleErrors();
        if (RAND_bytes(aes_iv.data(), 16) != 1) handleErrors();
    }

    // –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AES-256-CBC
    std::vector<unsigned char> encryptAES(const std::string& plaintext) {
        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
        if (!ctx) handleErrors();

        if (EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL,
            aes_key.data(), aes_iv.data()) != 1) {
            handleErrors();
        }

        std::vector<unsigned char> ciphertext(plaintext.size() + AES_BLOCK_SIZE);
        int len = 0, ciphertext_len = 0;

        if (EVP_EncryptUpdate(ctx, ciphertext.data(), &len,
            (unsigned char*)plaintext.c_str(),
            plaintext.size()) != 1) {
            handleErrors();
        }
        ciphertext_len = len;

        if (EVP_EncryptFinal_ex(ctx, ciphertext.data() + len, &len) != 1) {
            handleErrors();
        }
        ciphertext_len += len;

        EVP_CIPHER_CTX_free(ctx);
        ciphertext.resize(ciphertext_len);
        return ciphertext;
    }

    // –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AES-256-CBC
    std::string decryptAES(const std::vector<unsigned char>& ciphertext) {
        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
        if (!ctx) handleErrors();

        if (EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL,
            aes_key.data(), aes_iv.data()) != 1) {
            handleErrors();
        }

        std::vector<unsigned char> plaintext(ciphertext.size());
        int len = 0, plaintext_len = 0;

        if (EVP_DecryptUpdate(ctx, plaintext.data(), &len,
            ciphertext.data(), ciphertext.size()) != 1) {
            handleErrors();
        }
        plaintext_len = len;

        if (EVP_DecryptFinal_ex(ctx, plaintext.data() + len, &len) != 1) {
            handleErrors();
        }
        plaintext_len += len;

        EVP_CIPHER_CTX_free(ctx);
        return std::string(plaintext.begin(), plaintext.begin() + plaintext_len);
    }

    // –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES –∫–ª—é—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é RSA
    std::vector<unsigned char> encryptRSA() {
        EVP_PKEY_CTX* ctx = EVP_PKEY_CTX_new(rsa_keypair, NULL);
        if (!ctx) handleErrors();

        if (EVP_PKEY_encrypt_init(ctx) <= 0) handleErrors();
        if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_OAEP_PADDING) <= 0) {
            handleErrors();
        }

        size_t outlen;
        if (EVP_PKEY_encrypt(ctx, NULL, &outlen, aes_key.data(), 32) <= 0) {
            handleErrors();
        }

        std::vector<unsigned char> encrypted_key(outlen);
        if (EVP_PKEY_encrypt(ctx, encrypted_key.data(), &outlen,
            aes_key.data(), 32) <= 0) {
            handleErrors();
        }

        EVP_PKEY_CTX_free(ctx);
        return encrypted_key;
    }

    // –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES –∫–ª—é—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é RSA
    void decryptRSA(const std::vector<unsigned char>& encrypted_key) {
        EVP_PKEY_CTX* ctx = EVP_PKEY_CTX_new(rsa_keypair, NULL);
        if (!ctx) handleErrors();

        if (EVP_PKEY_decrypt_init(ctx) <= 0) handleErrors();
        if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_OAEP_PADDING) <= 0) {
            handleErrors();
        }

        size_t outlen;
        if (EVP_PKEY_decrypt(ctx, NULL, &outlen,
            encrypted_key.data(), encrypted_key.size()) <= 0) {
            handleErrors();
        }

        std::vector<unsigned char> decrypted_key(outlen);
        if (EVP_PKEY_decrypt(ctx, decrypted_key.data(), &outlen,
            encrypted_key.data(), encrypted_key.size()) <= 0) {
            handleErrors();
        }

        aes_key = decrypted_key;
        EVP_PKEY_CTX_free(ctx);
    }
};

// Benchmark —Ñ—É–Ω–∫—Ü—ñ—è
void runBenchmark() {
    std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë     OpenSSL - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–±—Ä—ñ–¥–Ω–æ—ó –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–∏ RSA+AES     ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

    OpenSSLHybridCrypto crypto;

    // –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    std::string plaintext = "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ ‚Ññ1. "
        "–ì—ñ–±—Ä—ñ–¥–Ω–∞ –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–∞ RSA-2048 + AES-256-CBC. "
        "–ö–ü–Ü —ñ–º. –Ü–≥–æ—Ä—è –°—ñ–∫–æ—Ä—Å—å–∫–æ–≥–æ, 2025 —Ä—ñ–∫. –ü—ñ–¥–≥—Ä—É–ø–∞ 2–ê.";

    std::cout << "üìù –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç:\n   \"" << plaintext << "\"\n\n";
    std::cout << "üìä –†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: " << plaintext.size() << " –±–∞–π—Ç\n\n";

    // 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è RSA –∫–ª—é—á–æ–≤–æ—ó –ø–∞—Ä–∏
    auto start = std::chrono::high_resolution_clock::now();
    crypto.generateRSAKeypair();
    auto end = std::chrono::high_resolution_clock::now();
    auto duration_rsa_gen = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);

    std::cout << "üîê –ö–†–û–ö 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è RSA-2048 –∫–ª—é—á–æ–≤–æ—ó –ø–∞—Ä–∏\n";
    std::cout << "   ‚è±Ô∏è  –ß–∞—Å: " << duration_rsa_gen.count() << " –º—Å\n";
    std::cout << "   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ\n\n";

    // 2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AES –∫–ª—é—á–∞
    start = std::chrono::high_resolution_clock::now();
    crypto.generateAESKey();
    end = std::chrono::high_resolution_clock::now();
    auto duration_aes_gen = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

    std::cout << "üîë –ö–†–û–ö 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AES-256 –∫–ª—é—á–∞ —Ç–∞ IV\n";
    std::cout << "   ‚è±Ô∏è  –ß–∞—Å: " << duration_aes_gen.count() << " –º–∫—Å\n";
    std::cout << "   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ\n\n";

    // 3. –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ AES
    start = std::chrono::high_resolution_clock::now();
    auto ciphertext = crypto.encryptAES(plaintext);
    end = std::chrono::high_resolution_clock::now();
    auto duration_aes_enc = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

    std::cout << "üîí –ö–†–û–ö 3: –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ AES-256-CBC\n";
    std::cout << "   ‚è±Ô∏è  –ß–∞—Å: " << duration_aes_enc.count() << " –º–∫—Å\n";
    std::cout << "   üì¶ –†–æ–∑–º—ñ—Ä —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç—É: " << ciphertext.size() << " –±–∞–π—Ç\n";
    std::cout << "   ‚úÖ –î–∞–Ω—ñ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ\n\n";

    // 4. –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES –∫–ª—é—á–∞ –∑ RSA
    start = std::chrono::high_resolution_clock::now();
    auto encrypted_key = crypto.encryptRSA();
    end = std::chrono::high_resolution_clock::now();
    auto duration_rsa_enc = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

    std::cout << "üîê –ö–†–û–ö 4: –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES –∫–ª—é—á–∞ –∑ RSA-2048\n";
    std::cout << "   ‚è±Ô∏è  –ß–∞—Å: " << duration_rsa_enc.count() << " –º–∫—Å\n";
    std::cout << "   üì¶ –†–æ–∑–º—ñ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–ª—é—á–∞: " << encrypted_key.size() << " –±–∞–π—Ç\n";
    std::cout << "   ‚úÖ –ö–ª—é—á –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ\n\n";

    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    std::cout << "           üì® –ü–ï–†–ï–î–ê–ß–ê –î–ê–ù–ò–• (ciphertext + encrypted_key)\n";
    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

    // 5. –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES –∫–ª—é—á–∞ –∑ RSA
    start = std::chrono::high_resolution_clock::now();
    crypto.decryptRSA(encrypted_key);
    end = std::chrono::high_resolution_clock::now();
    auto duration_rsa_dec = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

    std::cout << "üîì –ö–†–û–ö 5: –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES –∫–ª—é—á–∞ –∑ RSA-2048\n";
    std::cout << "   ‚è±Ô∏è  –ß–∞—Å: " << duration_rsa_dec.count() << " –º–∫—Å\n";
    std::cout << "   ‚úÖ –ö–ª—é—á –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ\n\n";

    // 6. –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ AES
    start = std::chrono::high_resolution_clock::now();
    auto decrypted_text = crypto.decryptAES(ciphertext);
    end = std::chrono::high_resolution_clock::now();
    auto duration_aes_dec = std::chrono::duration_cast<std::chrono::microseconds>(end - start);

    std::cout << "üîì –ö–†–û–ö 6: –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ AES-256-CBC\n";
    std::cout << "   ‚è±Ô∏è  –ß–∞—Å: " << duration_aes_dec.count() << " –º–∫—Å\n";
    std::cout << "   ‚úÖ –î–∞–Ω—ñ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ\n\n";

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ
    std::cout << "üîç –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç:\n   \"" << decrypted_text << "\"\n\n";

    bool success = (plaintext == decrypted_text);
    std::cout << "‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è: " << (success ? "–£–°–ü–Ü–®–ù–û ‚úì" : "–ü–û–ú–ò–õ–ö–ê ‚úó") << "\n\n";

    // –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë                  –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ë–ï–ù–ß–ú–ê–†–ö–Ü–ù–ì–£ (OpenSSL)            ‚ïë\n";
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
    std::cout << "‚ïë –û–ø–µ—Ä–∞—Ü—ñ—è                        ‚îÇ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è               ‚ïë\n";
    std::cout << "‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢\n";
    std::cout << "‚ïë –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è RSA-2048              ‚îÇ " << std::setw(20) << duration_rsa_gen.count() << " –º—Å    ‚ïë\n";
    std::cout << "‚ïë –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AES-256               ‚îÇ " << std::setw(20) << duration_aes_gen.count() << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïë –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES (–¥–∞–Ω–∏—Ö)          ‚îÇ " << std::setw(20) << duration_aes_enc.count() << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïë –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è RSA (–∫–ª—é—á–∞)          ‚îÇ " << std::setw(20) << duration_rsa_enc.count() << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïë –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è RSA (–∫–ª—é—á–∞)        ‚îÇ " << std::setw(20) << duration_rsa_dec.count() << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïë –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è AES (–¥–∞–Ω–∏—Ö)        ‚îÇ " << std::setw(20) << duration_aes_dec.count() << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢\n";

    auto total_enc = duration_aes_enc.count() + duration_rsa_enc.count();
    auto total_dec = duration_aes_dec.count() + duration_rsa_dec.count();

    std::cout << "‚ïë –ó–ê–ì–ê–õ–¨–ù–ò–ô –ß–ê–° –®–ò–§–†–£–í–ê–ù–ù–Ø        ‚îÇ " << std::setw(20) << total_enc << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïë –ó–ê–ì–ê–õ–¨–ù–ò–ô –ß–ê–° –î–ï–®–ò–§–†–£–í–ê–ù–ù–Ø      ‚îÇ " << std::setw(20) << total_dec << " –º–∫—Å   ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    double throughput_enc = (plaintext.size() / 1024.0) / (total_enc / 1000000.0);
    double throughput_dec = (plaintext.size() / 1024.0) / (total_dec / 1000000.0);

    std::cout << "üìä –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨:\n";
    std::cout << "   –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: " << std::fixed << std::setprecision(2) << throughput_enc << " KB/s\n";
    std::cout << "   –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: " << throughput_dec << " KB/s\n\n";

    std::cout << "üî¨ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: OpenSSL 3.x\n";
    std::cout << "üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Windows x64\n";
    std::cout << "üõ†Ô∏è  –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä: MSVC (Visual Studio 2022)\n";
    std::cout << "üìö –°—Ç–∞–Ω–¥–∞—Ä—Ç: C++17\n\n";
}

int main() {
    setupConsole();

    try {
        runBenchmark();
    }
    catch (const std::exception& e) {
        std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞: " << e.what() << std::endl;
        return 1;
    }

    std::cout << "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...";
    std::cin.get();
    return 0;
}
